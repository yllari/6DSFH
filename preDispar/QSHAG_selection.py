import vaex
import numpy as np
import argparse
import sys

class PreDisPar():
    """Data procesing class in preparation for disPar

    When instantiated, a file to read, structure,
    type of selection and columns (optional) are given
    """
    data = None
    sel_structure = None
    sel_type = None

    def __init__(self, in_file, structure, selection_type, columns=None):
        self.data = vaex.open(in_file)
        self.sel_structure = structure
        self.data = self.data[self.data[selection_type] == structure]
        self.sel_type = selection_type

        if columns != None:
            self.data = self.data[columns]

    def get_full(self):
        """Process data with given critera.

        A function should be defined by critera
        """
        # -+-+-+-+-+- Filters -+-+-+-+-+-+-+-
        # General
        bright = 'MG<5.5'
        dist = '1/new_parallax < 1.2'
        df = self.data.filter(bright).extract()
        df.select(dist, name="dist")
        return df.filter('dist').extract()

    def get_qshag(self):
        """Process data as QSHAG standard

        Filters in extinction, parallax over error to
        ensure dist = 1/parallax and quality with excess color
        """
        # QSHAG
        bright = 'MG<5.5'
        extinction = '(AG < 0.5)'
        poege = '(parallax_over_error > 5.0)'
        quality =  '(0.001+0.039*(bp_rp) < log10(phot_bp_rp_excess_factor)) & (log10(phot_bp_rp_excess_factor) < 0.12 + 0.039*(bp_rp))'
        dist = '1/new_parallax < 1.2'
        vel_cut = 'radial_velocity_error < 20'

        df = self.data.filter(bright).extract()
        # Separating just for the sake of maintaining
        # self.data selections clean
        df.select(extinction, name="ext")
        df.select(poege, name="poege")
        df.select(quality, name="quality")
        df.select(dist, name="dist")
        df.select(vel_cut, name="vel_cut")
        return df.filter('(ext)&(poege)&(quality)&(dist)&(vel_cut)').extract()
    def print_data(self):
        print(self.data)
        return None


    def print_columns(self):
        print(self.data.column_names)
        return None


if __name__ == "__main__":
    # -+-+-+-+-+-+-+-+-+-+-+- Setting up +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-

    # Possible structures to select
    names = [
        'Smooth','GE', 'LRL3',
        'HotDisk', 'Thamnos', 'Helmi',
        'Sequoia', 'ED1', 'LRL64',
        'ED2', 'ED4', 'ED3',
        'Typhon', 'ED5', 'ED6'
    ]
    name_values = np.arange(-1,15)
    lb_dc = dict(zip(names, name_values))
    # Reduced dictionary with mapping of labels to names
    #    "Smooth": -1,
    #    "GE": 0,
    #    "LRL3": 1,
    #    "HotDsk": 2,
    #    "Thamnos": 3,
    #    "Helmi": 4,
    #    "Sequoia": 5,
    #    "LRL64": 7

    # Select label dictionary, mahalanobis distance applied to groups, clusters or none
    # -- cluster: Mahalanobis distance applied to individual clusters conforming structure
    # -- group: Mahalanoibs dist appled to whole group
    # -- original: Just original clusters as selected from Emma Dodd's paper, with RUWE <1.4
    #    and radial_velocity_error < 20 (km/s) and  poe > 5
    sel_options = ["group", "cluster", "original"]
    sel_dc = {
        "group": "derived_labels_group",
        "cluster": "labels_substructure",
        "original": "dendo_group"
    }

    parser = argparse.ArgumentParser(
                    prog='QSHAG_selection',
                    description='''This program reads Emma Dodd\'s (ED) input and
                                exports Full and QSHAG files as generated by preDisPar class
                                ''',
                    epilog='a')
    parser.add_argument('in_file',
            help="File path to read ED\'s data")
    parser.add_argument('selection',
            help=f"Selected structure: p.e GE", choices
            =names)
    parser.add_argument('selection_type',
            help=f"Type of selection. How is the Mahalanobis distance applied (or if it is applied)",
            choices=sel_options )

    args =  parser.parse_args()

    # -+-+-+-+-+-+-+-+-+-+-+- Main code +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-ÂºVy

    in_file = args.in_file
    print(in_file)
    selection = args.selection
    selection_type = args.selection_type


    ## Main a
    structure = lb_dc[selection]
    sel_type = sel_dc[selection_type]

    pre_dispar = PreDisPar(in_file, structure, sel_type)
    out_qshag = pre_dispar.get_qshag()
    out_full = pre_dispar.get_full()
    print("number of stars, Full:", out_full.count())
    print("number of stars, QSHAG:", out_qshag.count())

    out_full.export_hdf5(f'{selection}_full.hdf5', progress=True)
    #out_qshag.export_hdf5(f'{selection}_qshag.hdf5', progress=True)
